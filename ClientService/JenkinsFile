pipeline {
    agent any

    environment {
        PATH = "${tool 'Maven'}/bin:${env.PATH}"
        registryName = 'algabrizaid/clientservice'
        imageTag = "latest-${BUILD_NUMBER}"
        GIT_CONFIG_NAME = 'zaidgabri'
        GIT_CONFIG_EMAIL = 'zaidgabri976@gmail.com'
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                              branches: [[name: 'main']],
                              doGenerateSubmoduleConfigurations: false,
                              extensions: [[$class: 'CleanBeforeCheckout']],
                              userRemoteConfigs: [[url: 'https://github.com/DevOpsTestOrgAi/E-Banking-App.git']]])
                }
            }
        }

        stage('Build and Test Service Registry') {
            steps {
                dir('ClientService') {
                    sh 'ls -ltr'
                    sh 'mvn clean package'
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "algabrizaid/clientservice:${imageTag}"
                DOCKERFILE_LOCATION = "ClientService/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('dockerhub')
            }
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE} ./ClientService'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "dockerhub") {
                        dockerImage.push()
                    }
                    sh 'docker rmi -f ${DOCKER_IMAGE}' // Remove local Docker image
                }
            }
        }

        stage('Update Manifests and Push to Git') {
            steps {
                script {
                    // ... (unchanged)
                }
            }
        }
    }

    post {
        success {
            echo 'Jenkins pipeline completed successfully!'
        }
    }
}

def gitConfigure() {
    sh "git config user.email ${GIT_CONFIG_EMAIL}"
    sh "git config user.name ${GIT_CONFIG_NAME}"
}
